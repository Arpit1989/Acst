{"version":3,"file":"static/webpack/static/development/pages/index.js.2957188e5a71cf26137e.hot-update.js","sources":["webpack:///./components/ContactForm.js"],"sourcesContent":["import Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport API from '../services/API';\nimport conf from '../config.json';\n\nconst apiService = new API({ url:`${conf.API_SERVER_URL}` });\n\n\nclass ContactForm extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        validated: false,\n        contact: {\n          first_name: '',\n          last_name: '',\n          email: '',\n          company_name: '',\n          work_phone: '',\n          phone: '',\n          address: '',\n          city: '',\n          state: '',\n          zip: '',\n          url: ''\n        }\n      };\n    }\n\n    handleSubmit(event) {\n      const form = event.currentTarget;\n      if (form.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        apiService.createEntity({ name: 'contact' })\n        if (this.state.contact.hasOwnProperty('id')){\n          apiService.endpoints.contact.update(this.state.contact).then((res) => {\n              this.props.updateHandler(res, 'success');\n          }).catch((err) => {\n            this.props.updateHandler(err, 'danger');\n          })\n        } else {\n          apiService.endpoints.contact.create(this.state.contact).then(res => {\n            this.props.updateHandler(res, 'success');\n          }).catch((err) => {\n            this.props.updateHandler(err, 'danger');\n          })\n        }\n      }\n      this.setState({ validated: true });\n      event.preventDefault();\n    }\n\n    handleChange(event){\n      event.preventDefault();\n      let contact = Object.assign({}, this.state.contact);\n      contact[event.target.name] = event.target.value\n      this.setState({\n          contact: contact\n      });\n    }\n\n    componentDidMount(){\n      this.setState({\n        contact: this.props.contact\n      })\n    }\n\n    render(){\n      const { validated } = this.state;\n      let readonly;\n      if (this.props.action === 'Show Contact') {\n        readonly = true;\n      }\n      return(\n        <Form\n          noValidate\n          validated={validated}\n          onSubmit={e => this.handleSubmit(e)}\n          >\n          <Form.Row>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                name=\"first_name\"\n                placeholder=\"First name\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.first_name}\n                readOnly={readonly}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please choose a first name.\n              </Form.Control.Feedback>\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                name=\"last_name\"\n                type=\"text\"\n                placeholder=\"Last name\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.last_name}\n                readOnly={readonly}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please choose a last name.\n              </Form.Control.Feedback>\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationCustomUsername\">\n              <Form.Label>Email</Form.Label>\n              <InputGroup>\n                <Form.Control\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  name=\"email\"\n                  onChange={ this.handleChange.bind(this) }\n                  defaultValue={this.state.contact.email}\n                  aria-describedby=\"inputGroupPrepend\"\n                  readOnly={readonly}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a valid email.\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n              <Form.Label>Company</Form.Label>\n              <Form.Control\n                name=\"company_name\"\n                type=\"text\"\n                placeholder=\"Company\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.company_name}\n                readOnly={readonly}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please choose a Company.\n              </Form.Control.Feedback>\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n              <Form.Label>Phone</Form.Label>\n              <Form.Control\n                name=\"phone\"\n                type=\"number\"\n                placeholder=\"Phone\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.phone}\n                readOnly={readonly}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please choose a phone number.\n              </Form.Control.Feedback>\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"4\" controlId=\"validationCustomUsername\">\n              <Form.Label>Work Phone</Form.Label>\n              <InputGroup>\n                <Form.Control\n                  type=\"number\"\n                  name=\"work_phone\"\n                  placeholder=\"Work Phone\"\n                  onChange={ this.handleChange.bind(this) }\n                  defaultValue={this.state.contact.work_phone}\n                  aria-describedby=\"inputGroupPrepend\"\n                  readOnly={readonly}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a work phone.\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationCustom03\">\n              <Form.Label>Address</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Apartment, studio, or floor\"\n                name=\"address\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.address} readOnly={readonly} />\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid Address.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationCustom03\">\n              <Form.Label>URL</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"URL\"\n                name=\"url\"\n                type='url'\n                pattern=\"https?://.+\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.url} readOnly={readonly}/>\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid URL.\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationCustom03\">\n              <Form.Label>City</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"City\"\n                name=\"city\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.city}\n                readOnly={readonly}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid city.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n              <Form.Label>State</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"State\"\n                name=\"state\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.state}\n                readOnly={readonly}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid state.\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"3\" controlId=\"validationCustom05\">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Zip\"\n                name=\"zip\"\n                onChange={ this.handleChange.bind(this) }\n                defaultValue={this.state.contact.zip}\n                readOnly={readonly}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please provide a valid zip.\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Button disabled={readonly} className='mt-1 mb-1 btn-block' type=\"submit\">Submit form</Button>\n          </Form.Row>\n        </Form>\n      )\n    }\n}\n\nexport default ContactForm\n"],"mappings":"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","sourceRoot":""}